type User{
	name: String!
	company: String
	email: String!
	keywords: String
	userId: String! @unique
	role: Role!

	savedTenders: [Tender]
}

enum Role{
	ADMIN
	USER
}

type Tender{
	name: String!
	state: String!
	city: String!
	description: String!
	endDate: Time!
	openingDate: Time!
	estAmount: Int!
	emd: Int!
	url: String!

	savedBy: [User]
	createdTender: CreatedTender
}

type CreatedTender{
	data: [Tender]!
}

input CreateUserInput{
	name: String!
	email: String!
	userId: String!
}

input LoginUserInput{
	userId: String!
}

input SearchTendersInput{
	name: String
	description: String
	state: String
	city: String
}

input CreateTenderInput{
	name: String!
	state: String!
	city: String!
	description: String!
	endDate: Time!
	openingDate: Time!
	estAmount: Int!
	emd: Int!
	url: String!
}

type Query{
	userExists(userId: String!): Boolean! @resolver(name: "user_exists")
	userByRole(role: Role!): User
	currentUser: User @resolver(name: "current_user")
	tenderByName(name: String): [Tender]
	tenderByDescription(description: String): [Tender]
	tenderByState(state: String): [Tender]
	tenderByCity(city: String): [Tender]
	tenderByOpeningDate(openingDate: Time): [Tender]
	tenderByEndDate(endDate: Time): [Tender]
	tenderByEstAmount(estAmount: Int): [Tender]
	tenderByEmd(emd: Int): [Tender]
}

type Mutation{
	createUser(input: CreateUserInput): User @resolver(name: "create_user")
	loginUser(input: LoginUserInput): String @resolver(name: "login_user")
	createTenders(input: [CreateTenderInput]): [CreatedTender] @resolver(name: "create_tenders")
	createAdminUser: Boolean! @resolver(name: "create_admin_user")
}